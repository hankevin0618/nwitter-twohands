{"version":3,"sources":["myBase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebaseInstance","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","authService","auth","dbService","firestore","storageService","storage","AuthForm","newAccount","setError","useState","email","setEmail","password","setPassword","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","Auth","setNewAccount","error","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","data","console","log","onClick","prev","style","color","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDelete","window","confirm","doc","id","delete","refFromURL","attachmentURL","toggleEditing","update","src","width","height","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorID","creatorName","displayName","collection","add","maxLength","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","Home","nweets","setNweets","useEffect","onSnapshot","snapShot","nweetArray","docs","map","Profile","refreshUser","newDisplayName","setNewDisplayName","history","useHistory","getMyNweets","where","orderBy","get","updateProfile","signOut","push","Navigation","to","AppRouter","isLoggedIn","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9339419b.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\"; // https://firebase.google.com/docs/reference/js/firebase.auth.Auth\r\nimport \"firebase/firestore\"\r\nimport \"firebase/storage\"\r\n\r\n// 여기서 auth를 먼저 import 하라고 함\r\n\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAJ0yF1lB1O5gOAzTQgb6q7S-Sx-8l0ZMU\",\r\n    authDomain: \"nwitter-twohands.firebaseapp.com\",\r\n    projectId: \"nwitter-twohands\",\r\n    storageBucket: \"nwitter-twohands.appspot.com\",\r\n    messagingSenderId: \"873521844372\",\r\n    appId: \"1:873521844372:web:63be0e0fcbaa7ae88a2481\"\r\n};\r\n// Initialize Firebase\r\nexport default firebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore()\r\n\r\n// firebase.storage.Reference\r\n// Represents a reference to a Google Cloud Storage object. Developers can upload, download, and delete objects, as well as get/set object metadata.\r\n\r\nexport const storageService = firebase.storage();","import { authService } from \"myBase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst AuthForm = ({ newAccount, setError }) => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n\r\n    const onChange = (event) => {\r\n        const { target: { name, value } } = event //deconstructing\r\n        if (name === \"email\") {\r\n            setEmail(value)\r\n        } else if (name === \"password\") {\r\n            setPassword(value)\r\n        }\r\n    }\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            let data;\r\n            if (newAccount) {\r\n                // create account\r\n                data = await authService.createUserWithEmailAndPassword(email, password) // use await because it says Promise\r\n\r\n            } else {\r\n                // log in account\r\n                data = await authService.signInWithEmailAndPassword(email, password);\r\n            }\r\n            // console.log(data)\r\n        } catch (error) {\r\n            setError(error.message)\r\n        }\r\n    }\r\n    return (\r\n\r\n        <form className=\"test\" onSubmit={onSubmit}>\r\n            <input name=\"email\" type=\"text\" onChange={onChange} placeholder=\"Email\" required value={email} />\r\n            <input name=\"password\" type=\"password\" onChange={onChange} placeholder=\"Password\" required value={password} />\r\n            <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} />\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nexport default AuthForm;","import AuthForm from \"components/AuthForm\";\r\nimport { authService, firebaseInstance } from \"myBase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst Auth = () => {\r\n\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n    const toggleAccount = () => setNewAccount((prev) => !prev)\r\n\r\n\r\n    const onSocialClick = async (event) => {\r\n        const { target: { name } } = event;\r\n        //우선 구글이든 뭐든 provider를 정의해놓고 나중에 입힌다\r\n        // firebaseInstance 는 모듈로부터 가져와야하기때문에 myBase.js 를 조정했다\r\n        let provider;\r\n        if (name === \"google\") {\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        } else if (name === \"github\") {\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n        // provicer detection이 되고나면 팝업창 띄우기를 진행한다\r\n        const data = await authService.signInWithPopup(provider)\r\n        console.log(data)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <AuthForm newAccount={newAccount} setError={setError} />\r\n            <div>\r\n                <button onClick={onSocialClick} name=\"google\">Continue with Google</button>\r\n                <button onClick={onSocialClick} name=\"github\">Continue with GitHub</button>\r\n            </div>\r\n            <button onClick={toggleAccount}>{newAccount ? \"Sign In\" : \"Create New Account\"}</button>\r\n\r\n            <p style={{ color: 'red' }}>{error}</p>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Auth;","import { dbService, storageService } from 'myBase';\r\nimport React, { useState } from 'react';\r\n\r\nconst Nweet = ({ nweetObj, isOwner }) => {\r\n    const [editing, setEditing] = useState(false);\r\n    const [newNweet, setNewNweet] = useState(nweetObj.text)\r\n    const onDelete = async () => {\r\n        const ok = window.confirm(\"Are you sure?\");\r\n        if (ok) {\r\n            await dbService.doc(`nweets/${nweetObj.id}`).delete()\r\n            // storage에 사진이 저장되기떄문에 밑처럼 사진의 url의 ref를 따라가서 storage안의 파일을 지워준다 위와 다르게\r\n            await storageService.refFromURL(nweetObj.attachmentURL).delete()\r\n        }\r\n    }\r\n    const toggleEditing = () => setEditing(prev => !prev)\r\n    const onChange = (event) => {\r\n        const { target: { value } } = event;\r\n        setNewNweet(value);\r\n    }\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n            text: newNweet\r\n        })\r\n        toggleEditing()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editing\r\n                ?\r\n                <>\r\n                    <form onSubmit={onSubmit}>\r\n                        <input type=\"text\" onChange={onChange} placeholder=\"Edit your Nweet\" value={newNweet} required />\r\n                        <input type=\"submit\" value=\"Update\" />\r\n                    </form>\r\n                    <button onClick={toggleEditing}>Cancel</button>\r\n                </>\r\n                :\r\n                <>\r\n                    <h4>{nweetObj.text}</h4>\r\n                    {nweetObj.attachmentURL && <img src={nweetObj.attachmentURL} width=\"50px\" height=\"50px\" />}\r\n                    {isOwner && <>\r\n                        <button onClick={onDelete}>Delete</button>\r\n                        <button onClick={toggleEditing}>Edit</button>\r\n                    </>}\r\n                </>\r\n\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nweet;","import { dbService, storageService } from \"myBase\";\r\nimport React, { useState } from \"react\"\r\nimport { v4 as uuidv4 } from 'uuid' // 랜덤한 아이디를 만들어주는 모듈\r\n\r\nconst NweetFactory = ({ userObj }) => {\r\n    const [nweet, setNweet] = useState(\"\")\r\n    const [attachment, setAttachment] = useState(\"\")\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        let attachmentURL = \"\";\r\n\r\n        if (attachment !== \"\") {\r\n            // Storage에 사진을 넣고서 url을 cloud firestore에 같이보내준다 \r\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`) // 이건 약간 dummy ref를 만드는 것. 여기다가 이제 진짜 데이터를 연결시켜줘야함\r\n            const response = await attachmentRef.putString(attachment, \"data_url\")\r\n            attachmentURL = await response.ref.getDownloadURL()\r\n        }\r\n        const nweetObj = {\r\n            text: nweet,\r\n            createdAt: Date.now(),\r\n            creatorID: userObj.uid,\r\n            creatorName: userObj.displayName,\r\n            attachmentURL\r\n        }\r\n\r\n        await dbService.collection(\"nweets\").add(nweetObj)\r\n        setNweet(\"\")\r\n        setAttachment(\"\")\r\n    }\r\n    const onChange = (event) => {\r\n        const { target: { value } } = event\r\n        setNweet(value);\r\n    }\r\n\r\n    const onFileChange = (event) => {\r\n        const { target: { files } } = event;\r\n        const theFile = files[0];\r\n        // use FileReader API\r\n        const reader = new FileReader();\r\n        reader.onloadend = (finishedEvent) => {\r\n            const { currentTarget: { result } } = finishedEvent\r\n            setAttachment(result)\r\n        }\r\n        reader.readAsDataURL(theFile)\r\n    }\r\n    const onClearAttachment = () => {\r\n        setAttachment(null)\r\n    }\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <input value={nweet} onChange={onChange} type=\"text\" placeholder=\"What's on your mind?\" maxLength={140} />\r\n            <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n            <input type=\"submit\" value=\"Nweet\" />\r\n            {attachment &&\r\n                <div>\r\n                    <img src={attachment} width=\"50px\" height=\"50px\" />\r\n                    <button onClick={onClearAttachment}>Clear</button>\r\n                </div>\r\n\r\n            }\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NweetFactory;","import Nweet from \"components/Nweet\";\r\nimport NweetFactory from \"components/NweetFactory\";\r\nimport { dbService } from \"myBase\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst Home = ({ userObj }) => {\r\n    const [nweets, setNweets] = useState([])\r\n\r\n    useEffect(() => {\r\n        // real time 을 가능케해주는 listener onSnapshot\r\n        dbService.collection(\"nweets\").onSnapshot(snapShot => {\r\n            // re-render 안하고 한번만 실행되기때문에 foreach 보다 나음\r\n            const nweetArray = snapShot.docs.map(doc => ({ id: doc.id, ...doc.data() }))\r\n            // 이제 set 해주면 됌\r\n            setNweets(nweetArray)\r\n        })\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <NweetFactory userObj={userObj} />\r\n\r\n            <div>\r\n                {nweets.map(nweet => (\r\n                    <Nweet key={nweet.id} nweetObj={nweet} isOwner={nweet.creatorID === userObj.uid} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Home;\r\n\r\n\r\n    // 올드버젼이래서 지움 ---- >\r\n    // const getNweets = async () => {\r\n    //     const dbNweets = await dbService.collection(\"nweets\").get();\r\n    //     dbNweets.forEach(document => {\r\n    //         const nweetObject = {\r\n    //             ...document.data(),\r\n    //             id: document.id,\r\n    //             authorName: userObj.displayName,\r\n    //         }\r\n    //         setNweets((prev) => [nweetObject, ...prev])\r\n    //     })\r\n    // }","import { authService, dbService } from \"myBase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Profile = ({ refreshUser, userObj }) => {\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName)\r\n\r\n    let history = useHistory()\r\n    const onLogOutClick = () => {\r\n        authService.signOut();\r\n        history.push('/')\r\n    }\r\n    // Profile 에서는 user가 누군지 모르기때문에 그것부터 알려줘야한다\r\n    const getMyNweets = async () => {\r\n        // this is how it filters the nweets I posted\r\n        const nweets = await dbService\r\n            .collection(\"nweets\")\r\n            .where(\"creatorID\", \"==\", userObj.uid)\r\n            .orderBy(\"CreatedAt\")\r\n            .get()\r\n        // console.log(nweets.docs)\r\n        // console.log(nweets.docs.map((doc) => doc.data()));\r\n\r\n    }\r\n    useEffect(() => {\r\n        getMyNweets();\r\n    }, [])\r\n\r\n    const onChange = (event) => {\r\n        const { target: { value } } = event\r\n        setNewDisplayName(value)\r\n    }\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault()\r\n        // only if user wants to make changes\r\n        if (userObj.displayName !== newDisplayName) {\r\n            await userObj.updateProfile({\r\n                displayName: newDisplayName\r\n            })\r\n            refreshUser();\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit}>\r\n                <input onChange={onChange} type=\"text\" placeholder=\"Display Name\" value={newDisplayName} />\r\n                <input type=\"submit\" value=\"Update Profile\" />\r\n            </form>\r\n            <button onClick={onLogOutClick}>Log Out</button>\r\n        </>\r\n    )\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst Navigation = ({ userObj }) => {\r\n    return (\r\n        <nav>\r\n            <ul>\r\n                <li><Link to=\"/\">Home</Link></li>\r\n                <li><Link to=\"/profile\">{userObj.displayName} Profile </Link></li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport { HashRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport Auth from \"../routes/Auth\";\r\nimport Home from \"../routes/Home\";\r\nimport Profile from \"../routes/Profile\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\r\n    return (\r\n        <Router>\r\n            {isLoggedIn && <Navigation userObj={userObj} />}\r\n            <Switch>\r\n                {isLoggedIn\r\n                    ? (\r\n                        <>\r\n                            {/* userObj를 App.js에서 부터 전달해오고있음 */}\r\n                            <Route exact path=\"/\"><Home userObj={userObj} /></Route>\r\n                            <Route exact path=\"/profile\"><Profile userObj={userObj} refreshUser={refreshUser} /></Route>\r\n                        </>\r\n                    )\r\n                    : (\r\n                        <>\r\n                            <Route exact path=\"/\"><Auth /></Route>\r\n                        </>\r\n                    )\r\n                }\r\n\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter;","import React, { useEffect, useState } from \"react\"\nimport AppRouter from \"components/Router\";\nimport { authService } from \"myBase\"\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null)\n  useEffect(() => {\n    // 로그인 되면 콜함\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        // setUserObj(user) 오브젝트가 너무 크기때문에 필요한 것만 가져온다\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        })\n      } else {\n        setUserObj(null) // make it to logout\n      }\n      setInit(true)\n\n    })\n  }, [])\n  // 프로필 업데이트 했을때 자동으로 변화가 있게\n  // 오브젝트를 작게만드니까 적용이됌\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj(authService.currentUser)\n  }\n\n  return (\n    <>\n      {/* 이곳에서의 데이터를 밑으로 보내고싶을때는 props를 사용 */}\n      {init ? <AppRouter refreshUser={refreshUser} isLoggedIn={Boolean(userObj)} userObj={userObj} /> : \"Initialising...\"}\n\n      {/* <footer>&copy; {new Date().getFullYear()} Nwitter </footer> */}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport \"./style.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}