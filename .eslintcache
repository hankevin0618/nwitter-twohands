[{"C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\index.js":"1","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\components\\App.js":"2","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\components\\Router.js":"3","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\routes\\Home.js":"4","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\routes\\Auth.js":"5","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\routes\\Profile.js":"6","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\myBase.js":"7","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\components\\Navigation.js":"8","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\components\\Nweet.js":"9"},{"size":241,"mtime":1613694553689,"results":"10","hashOfConfig":"11"},{"size":1295,"mtime":1615269668292,"results":"12","hashOfConfig":"11"},{"size":1151,"mtime":1615268840599,"results":"13","hashOfConfig":"11"},{"size":3648,"mtime":1614835234895,"results":"14","hashOfConfig":"11"},{"size":2805,"mtime":1613694076726,"results":"15","hashOfConfig":"11"},{"size":1775,"mtime":1615268864897,"results":"16","hashOfConfig":"11"},{"size":1059,"mtime":1614648547122,"results":"17","hashOfConfig":"11"},{"size":368,"mtime":1614833993116,"results":"18","hashOfConfig":"11"},{"size":2002,"mtime":1614644566412,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"1unjqr1",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"23"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"23"},"C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\index.js",["43"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport firebase from \"./myBase\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n",["44","45"],"C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\components\\App.js",["46"],"C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\components\\Router.js",["47"],"C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\routes\\Home.js",["48"],"import Nweet from \"components/Nweet\";\r\nimport { dbService, storageService } from \"myBase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nconst Home = ({ userObj }) => {\r\n    const [nweet, setNweet] = useState(\"\")\r\n    const [nweets, setNweets] = useState([])\r\n    const [attachment, setAttachment] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        // real time 을 가능케해주는 listener onSnapshot\r\n        dbService.collection(\"nweets\").onSnapshot(snapShot => {\r\n            // re-render 안하고 한번만 실행되기때문에 foreach 보다 나음\r\n            const nweetArray = snapShot.docs.map(doc => ({ id: doc.id, ...doc.data() }))\r\n            // 이제 set 해주면 됌\r\n            setNweets(nweetArray)\r\n        })\r\n    }, [])\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        let attachmentURL = \"\";\r\n\r\n        if (attachment !== \"\") {\r\n            // Storage에 사진을 넣고서 url을 cloud firestore에 같이보내준다 \r\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`) // 이건 약간 dummy ref를 만드는 것. 여기다가 이제 진짜 데이터를 연결시켜줘야함\r\n            const response = await attachmentRef.putString(attachment, \"data_url\")\r\n            attachmentURL = await response.ref.getDownloadURL()\r\n        }\r\n        const nweetObj = {\r\n            text: nweet,\r\n            createdAt: Date.now(),\r\n            creatorID: userObj.uid,\r\n            creatorName: userObj.displayName,\r\n            attachmentURL\r\n        }\r\n\r\n        await dbService.collection(\"nweets\").add(nweetObj)\r\n        setNweet(\"\")\r\n        setAttachment(\"\")\r\n    }\r\n    const onChange = (event) => {\r\n        const { target: { value } } = event\r\n        setNweet(value);\r\n    }\r\n\r\n    const onFileChange = (event) => {\r\n        const { target: { files } } = event;\r\n        const theFile = files[0];\r\n        // use FileReader API\r\n        const reader = new FileReader();\r\n        reader.onloadend = (finishedEvent) => {\r\n            const { currentTarget: { result } } = finishedEvent\r\n            setAttachment(result)\r\n        }\r\n        reader.readAsDataURL(theFile)\r\n    }\r\n    const onClearAttachment = () => {\r\n        setAttachment(null)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={onSubmit}>\r\n                <input value={nweet} onChange={onChange} type=\"text\" placeholder=\"What's on your mind?\" maxLength={140} />\r\n                <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n                <input type=\"submit\" value=\"Nweet\" />\r\n                {attachment &&\r\n                    <div>\r\n                        <img src={attachment} width=\"50px\" height=\"50px\" />\r\n                        <button onClick={onClearAttachment}>Clear</button>\r\n                    </div>\r\n\r\n                }\r\n            </form>\r\n            <div>\r\n                {nweets.map(nweet => (\r\n                    <Nweet key={nweet.id} nweetObj={nweet} isOwner={nweet.creatorID === userObj.uid} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Home;\r\n\r\n\r\n    // 올드버젼이래서 지움 ---- >\r\n    // const getNweets = async () => {\r\n    //     const dbNweets = await dbService.collection(\"nweets\").get();\r\n    //     dbNweets.forEach(document => {\r\n    //         const nweetObject = {\r\n    //             ...document.data(),\r\n    //             id: document.id,\r\n    //             authorName: userObj.displayName,\r\n    //         }\r\n    //         setNweets((prev) => [nweetObject, ...prev])\r\n    //     })\r\n    // }","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\routes\\Auth.js",["49"],"import { authService, firebaseInstance } from \"myBase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst Auth = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n    const toggleAccount = () => setNewAccount((prev) => !prev)\r\n    const onChange = (event) => {\r\n        const { target: { name, value } } = event //deconstructing\r\n        if (name === \"email\") {\r\n            setEmail(value)\r\n        } else if (name === \"password\") {\r\n            setPassword(value)\r\n        }\r\n    }\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            let data;\r\n            if (newAccount) {\r\n                // create account\r\n                data = await authService.createUserWithEmailAndPassword(email, password) // use await because it says Promise\r\n\r\n            } else {\r\n                // log in account\r\n                data = await authService.signInWithEmailAndPassword(email, password);\r\n            }\r\n            // console.log(data)\r\n        } catch (error) {\r\n            setError(error.message)\r\n        }\r\n    }\r\n\r\n    const onSocialClick = async (event) => {\r\n        const { target: { name } } = event;\r\n        //우선 구글이든 뭐든 provider를 정의해놓고 나중에 입힌다\r\n        // firebaseInstance 는 모듈로부터 가져와야하기때문에 myBase.js 를 조정했다\r\n        let provider;\r\n        if (name === \"google\") {\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        } else if (name === \"github\") {\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n        // provicer detection이 되고나면 팝업창 띄우기를 진행한다\r\n        const data = await authService.signInWithPopup(provider)\r\n        console.log(data)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={onSubmit}>\r\n                <input name=\"email\" type=\"text\" onChange={onChange} placeholder=\"Email\" required value={email} />\r\n                <input name=\"password\" type=\"password\" onChange={onChange} placeholder=\"Password\" required value={password} />\r\n                <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} />\r\n            </form>\r\n            <div>\r\n                <button onClick={onSocialClick} name=\"google\">Continue with Google</button>\r\n                <button onClick={onSocialClick} name=\"github\">Continue with GitHub</button>\r\n            </div>\r\n            <button onClick={toggleAccount}>{newAccount ? \"Sign In\" : \"Create New Account\"}</button>\r\n\r\n            <p style={{ color: 'red' }}>{error}</p>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Auth;","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\routes\\Profile.js",["50","51"],"C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\myBase.js",[],"C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\components\\Navigation.js",[],"C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\components\\Nweet.js",["52"],"import { dbService, storageService } from 'myBase';\r\nimport React, { useState } from 'react';\r\n\r\nconst Nweet = ({ nweetObj, isOwner }) => {\r\n    const [editing, setEditing] = useState(false);\r\n    const [newNweet, setNewNweet] = useState(nweetObj.text)\r\n    const onDelete = async () => {\r\n        const ok = window.confirm(\"Are you sure?\");\r\n        if (ok) {\r\n            await dbService.doc(`nweets/${nweetObj.id}`).delete()\r\n            // storage에 사진이 저장되기떄문에 밑처럼 사진의 url의 ref를 따라가서 storage안의 파일을 지워준다 위와 다르게\r\n            await storageService.refFromURL(nweetObj.attachmentURL).delete()\r\n        }\r\n    }\r\n    const toggleEditing = () => setEditing(prev => !prev)\r\n    const onChange = (event) => {\r\n        const { target: { value } } = event;\r\n        setNewNweet(value);\r\n    }\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n            text: newNweet\r\n        })\r\n        toggleEditing()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editing\r\n                ?\r\n                <>\r\n                    <form onSubmit={onSubmit}>\r\n                        <input type=\"text\" onChange={onChange} placeholder=\"Edit your Nweet\" value={newNweet} required />\r\n                        <input type=\"submit\" value=\"Update\" />\r\n                    </form>\r\n                    <button onClick={toggleEditing}>Cancel</button>\r\n                </>\r\n                :\r\n                <>\r\n                    <h4>{nweetObj.text}</h4>\r\n                    {nweetObj.attachmentURL && <img src={nweetObj.attachmentURL} width=\"50px\" height=\"50px\" />}\r\n                    {isOwner && <>\r\n                        <button onClick={onDelete}>Delete</button>\r\n                        <button onClick={toggleEditing}>Edit</button>\r\n                    </>}\r\n                </>\r\n\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nweet;",{"ruleId":"53","severity":1,"message":"54","line":4,"column":8,"nodeType":"55","messageId":"56","endLine":4,"endColumn":16},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"53","severity":1,"message":"61","line":27,"column":11,"nodeType":"55","messageId":"56","endLine":27,"endColumn":15},{"ruleId":"53","severity":1,"message":"62","line":2,"column":32,"nodeType":"55","messageId":"56","endLine":2,"endColumn":40},{"ruleId":"63","severity":1,"message":"64","line":70,"column":25,"nodeType":"65","endLine":70,"endColumn":76},{"ruleId":"53","severity":1,"message":"66","line":28,"column":17,"nodeType":"55","messageId":"56","endLine":28,"endColumn":21},{"ruleId":"53","severity":1,"message":"67","line":16,"column":15,"nodeType":"55","messageId":"56","endLine":16,"endColumn":21},{"ruleId":"68","severity":1,"message":"69","line":27,"column":8,"nodeType":"70","endLine":27,"endColumn":10,"suggestions":"71"},{"ruleId":"63","severity":1,"message":"64","line":42,"column":48,"nodeType":"65","endLine":42,"endColumn":111},"no-unused-vars","'firebase' is defined but never used.","Identifier","unusedVar","no-native-reassign",["72"],"no-negated-in-lhs",["73"],"'user' is assigned a value but never used.","'Redirect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'data' is assigned a value but never used.","'nweets' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMyNweets'. Either include it or remove the dependency array.","ArrayExpression",["74"],"no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},"Update the dependencies array to be: [getMyNweets]",{"range":"77","text":"78"},[904,906],"[getMyNweets]"]