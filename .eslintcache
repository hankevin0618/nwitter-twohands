[{"C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\index.js":"1","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\components\\App.js":"2","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\components\\Router.js":"3","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\routes\\Home.js":"4","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\routes\\Auth.js":"5","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\routes\\Profile.js":"6","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\myBase.js":"7","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\components\\Navigation.js":"8","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\components\\Nweet.js":"9","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\components\\NweetFactory.js":"10","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\components\\AuthForm.js":"11"},{"size":229,"mtime":1615271524688,"results":"12","hashOfConfig":"13"},{"size":1356,"mtime":1615271489272,"results":"14","hashOfConfig":"13"},{"size":1151,"mtime":1615268840599,"results":"15","hashOfConfig":"13"},{"size":1507,"mtime":1615270338242,"results":"16","hashOfConfig":"13"},{"size":1594,"mtime":1615270719421,"results":"17","hashOfConfig":"13"},{"size":1775,"mtime":1615270877943,"results":"18","hashOfConfig":"13"},{"size":1059,"mtime":1614648547122,"results":"19","hashOfConfig":"13"},{"size":368,"mtime":1614833993116,"results":"20","hashOfConfig":"13"},{"size":2002,"mtime":1614644566412,"results":"21","hashOfConfig":"13"},{"size":2428,"mtime":1615270335299,"results":"22","hashOfConfig":"13"},{"size":1518,"mtime":1615271716331,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1unjqr1",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"26"},"C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\index.js",[],["53","54"],"C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\components\\App.js",["55"],"import React, { useEffect, useState } from \"react\"\nimport AppRouter from \"components/Router\";\nimport { authService } from \"myBase\"\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null)\n  useEffect(() => {\n    // 로그인 되면 콜함\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        // setUserObj(user) 오브젝트가 너무 크기때문에 필요한 것만 가져온다\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        })\n      } else {\n        setUserObj(null) // make it to logout\n      }\n      setInit(true)\n\n    })\n  }, [])\n  // 프로필 업데이트 했을때 자동으로 변화가 있게\n  // 오브젝트를 작게만드니까 적용이됌\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj(authService.currentUser)\n  }\n\n  return (\n    <>\n      {/* 이곳에서의 데이터를 밑으로 보내고싶을때는 props를 사용 */}\n      {init ? <AppRouter refreshUser={refreshUser} isLoggedIn={Boolean(userObj)} userObj={userObj} /> : \"Initialising...\"}\n\n      {/* <footer>&copy; {new Date().getFullYear()} Nwitter </footer> */}\n    </>\n  );\n}\n\nexport default App;\n","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\components\\Router.js",["56"],"import React from \"react\";\r\nimport { HashRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport Auth from \"../routes/Auth\";\r\nimport Home from \"../routes/Home\";\r\nimport Profile from \"../routes/Profile\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\r\n    return (\r\n        <Router>\r\n            {isLoggedIn && <Navigation userObj={userObj} />}\r\n            <Switch>\r\n                {isLoggedIn\r\n                    ? (\r\n                        <>\r\n                            {/* userObj를 App.js에서 부터 전달해오고있음 */}\r\n                            <Route exact path=\"/\"><Home userObj={userObj} /></Route>\r\n                            <Route exact path=\"/profile\"><Profile userObj={userObj} refreshUser={refreshUser} /></Route>\r\n                        </>\r\n                    )\r\n                    : (\r\n                        <>\r\n                            <Route exact path=\"/\"><Auth /></Route>\r\n                        </>\r\n                    )\r\n                }\r\n\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter;","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\routes\\Home.js",[],"C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\routes\\Auth.js",[],"C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\routes\\Profile.js",["57","58"],"import { authService, dbService } from \"myBase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Profile = ({ refreshUser, userObj }) => {\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName)\r\n\r\n    let history = useHistory()\r\n    const onLogOutClick = () => {\r\n        authService.signOut();\r\n        history.push('/')\r\n    }\r\n    // Profile 에서는 user가 누군지 모르기때문에 그것부터 알려줘야한다\r\n    const getMyNweets = async () => {\r\n        // this is how it filters the nweets I posted\r\n        const nweets = await dbService\r\n            .collection(\"nweets\")\r\n            .where(\"creatorID\", \"==\", userObj.uid)\r\n            .orderBy(\"CreatedAt\")\r\n            .get()\r\n        // console.log(nweets.docs)\r\n        // console.log(nweets.docs.map((doc) => doc.data()));\r\n\r\n    }\r\n    useEffect(() => {\r\n        getMyNweets();\r\n    }, [])\r\n\r\n    const onChange = (event) => {\r\n        const { target: { value } } = event\r\n        setNewDisplayName(value)\r\n    }\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault()\r\n        // only if user wants to make changes\r\n        if (userObj.displayName !== newDisplayName) {\r\n            await userObj.updateProfile({\r\n                displayName: newDisplayName\r\n            })\r\n            refreshUser();\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit}>\r\n                <input onChange={onChange} type=\"text\" placeholder=\"Display Name\" value={newDisplayName} />\r\n                <input type=\"submit\" value=\"Update Profile\" />\r\n            </form>\r\n            <button onClick={onLogOutClick}>Log Out</button>\r\n        </>\r\n    )\r\n}\r\nexport default Profile;","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\myBase.js",[],"C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\components\\Navigation.js",[],"C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\components\\Nweet.js",["59"],"import { dbService, storageService } from 'myBase';\r\nimport React, { useState } from 'react';\r\n\r\nconst Nweet = ({ nweetObj, isOwner }) => {\r\n    const [editing, setEditing] = useState(false);\r\n    const [newNweet, setNewNweet] = useState(nweetObj.text)\r\n    const onDelete = async () => {\r\n        const ok = window.confirm(\"Are you sure?\");\r\n        if (ok) {\r\n            await dbService.doc(`nweets/${nweetObj.id}`).delete()\r\n            // storage에 사진이 저장되기떄문에 밑처럼 사진의 url의 ref를 따라가서 storage안의 파일을 지워준다 위와 다르게\r\n            await storageService.refFromURL(nweetObj.attachmentURL).delete()\r\n        }\r\n    }\r\n    const toggleEditing = () => setEditing(prev => !prev)\r\n    const onChange = (event) => {\r\n        const { target: { value } } = event;\r\n        setNewNweet(value);\r\n    }\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n            text: newNweet\r\n        })\r\n        toggleEditing()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editing\r\n                ?\r\n                <>\r\n                    <form onSubmit={onSubmit}>\r\n                        <input type=\"text\" onChange={onChange} placeholder=\"Edit your Nweet\" value={newNweet} required />\r\n                        <input type=\"submit\" value=\"Update\" />\r\n                    </form>\r\n                    <button onClick={toggleEditing}>Cancel</button>\r\n                </>\r\n                :\r\n                <>\r\n                    <h4>{nweetObj.text}</h4>\r\n                    {nweetObj.attachmentURL && <img src={nweetObj.attachmentURL} width=\"50px\" height=\"50px\" />}\r\n                    {isOwner && <>\r\n                        <button onClick={onDelete}>Delete</button>\r\n                        <button onClick={toggleEditing}>Edit</button>\r\n                    </>}\r\n                </>\r\n\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nweet;","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\components\\NweetFactory.js",["60"],"import { dbService, storageService } from \"myBase\";\r\nimport React, { useState } from \"react\"\r\nimport { v4 as uuidv4 } from 'uuid' // 랜덤한 아이디를 만들어주는 모듈\r\n\r\nconst NweetFactory = ({ userObj }) => {\r\n    const [nweet, setNweet] = useState(\"\")\r\n    const [attachment, setAttachment] = useState(\"\")\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        let attachmentURL = \"\";\r\n\r\n        if (attachment !== \"\") {\r\n            // Storage에 사진을 넣고서 url을 cloud firestore에 같이보내준다 \r\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`) // 이건 약간 dummy ref를 만드는 것. 여기다가 이제 진짜 데이터를 연결시켜줘야함\r\n            const response = await attachmentRef.putString(attachment, \"data_url\")\r\n            attachmentURL = await response.ref.getDownloadURL()\r\n        }\r\n        const nweetObj = {\r\n            text: nweet,\r\n            createdAt: Date.now(),\r\n            creatorID: userObj.uid,\r\n            creatorName: userObj.displayName,\r\n            attachmentURL\r\n        }\r\n\r\n        await dbService.collection(\"nweets\").add(nweetObj)\r\n        setNweet(\"\")\r\n        setAttachment(\"\")\r\n    }\r\n    const onChange = (event) => {\r\n        const { target: { value } } = event\r\n        setNweet(value);\r\n    }\r\n\r\n    const onFileChange = (event) => {\r\n        const { target: { files } } = event;\r\n        const theFile = files[0];\r\n        // use FileReader API\r\n        const reader = new FileReader();\r\n        reader.onloadend = (finishedEvent) => {\r\n            const { currentTarget: { result } } = finishedEvent\r\n            setAttachment(result)\r\n        }\r\n        reader.readAsDataURL(theFile)\r\n    }\r\n    const onClearAttachment = () => {\r\n        setAttachment(null)\r\n    }\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <input value={nweet} onChange={onChange} type=\"text\" placeholder=\"What's on your mind?\" maxLength={140} />\r\n            <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n            <input type=\"submit\" value=\"Nweet\" />\r\n            {attachment &&\r\n                <div>\r\n                    <img src={attachment} width=\"50px\" height=\"50px\" />\r\n                    <button onClick={onClearAttachment}>Clear</button>\r\n                </div>\r\n\r\n            }\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NweetFactory;","C:\\Users\\Kevin Han\\Desktop\\Work\\TWOHANDS\\nwitter\\nwitter\\src\\components\\AuthForm.js",["61"],"import { authService } from \"myBase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst AuthForm = ({ newAccount, setError }) => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n\r\n    const onChange = (event) => {\r\n        const { target: { name, value } } = event //deconstructing\r\n        if (name === \"email\") {\r\n            setEmail(value)\r\n        } else if (name === \"password\") {\r\n            setPassword(value)\r\n        }\r\n    }\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            let data;\r\n            if (newAccount) {\r\n                // create account\r\n                data = await authService.createUserWithEmailAndPassword(email, password) // use await because it says Promise\r\n\r\n            } else {\r\n                // log in account\r\n                data = await authService.signInWithEmailAndPassword(email, password);\r\n            }\r\n            // console.log(data)\r\n        } catch (error) {\r\n            setError(error.message)\r\n        }\r\n    }\r\n    return (\r\n\r\n        <form className=\"test\" onSubmit={onSubmit}>\r\n            <input name=\"email\" type=\"text\" onChange={onChange} placeholder=\"Email\" required value={email} />\r\n            <input name=\"password\" type=\"password\" onChange={onChange} placeholder=\"Password\" required value={password} />\r\n            <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} />\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nexport default AuthForm;",{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":29,"column":11,"nodeType":"68","messageId":"69","endLine":29,"endColumn":15},{"ruleId":"66","severity":1,"message":"70","line":2,"column":32,"nodeType":"68","messageId":"69","endLine":2,"endColumn":40},{"ruleId":"66","severity":1,"message":"71","line":16,"column":15,"nodeType":"68","messageId":"69","endLine":16,"endColumn":21},{"ruleId":"72","severity":1,"message":"73","line":27,"column":8,"nodeType":"74","endLine":27,"endColumn":10,"suggestions":"75"},{"ruleId":"76","severity":1,"message":"77","line":42,"column":48,"nodeType":"78","endLine":42,"endColumn":111},{"ruleId":"76","severity":1,"message":"77","line":57,"column":21,"nodeType":"78","endLine":57,"endColumn":72},{"ruleId":"66","severity":1,"message":"79","line":27,"column":17,"nodeType":"68","messageId":"69","endLine":27,"endColumn":21},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'nweets' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMyNweets'. Either include it or remove the dependency array.","ArrayExpression",["82"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},"Update the dependencies array to be: [getMyNweets]",{"range":"85","text":"86"},[904,906],"[getMyNweets]"]